{"abi":[{"type":"function","name":"claimId","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"context","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"isEligible","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"context","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"eligible","type":"bool","internalType":"bool"},{"name":"xpAmount","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"oracle","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IXPOracle"}],"stateMutability":"view"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"renounceOwnership","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"transferOwnership","inputs":[{"name":"newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateOracle","inputs":[{"name":"newOracle","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"validAfter","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"context","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"event","name":"OracleUpdated","inputs":[{"name":"oldOracle","type":"address","indexed":true,"internalType":"address"},{"name":"newOracle","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"OwnershipTransferred","inputs":[{"name":"previousOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"error","name":"OwnableInvalidOwner","inputs":[{"name":"owner","type":"address","internalType":"address"}]},{"type":"error","name":"OwnableUnauthorizedAccount","inputs":[{"name":"account","type":"address","internalType":"address"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"claimId(address,bytes)":"4e3c1509","isEligible(address,bytes)":"5dcbc01b","name()":"06fdde03","oracle()":"7dc0d1d0","owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b","updateOracle(address)":"1cb44dfc","validAfter(address,bytes)":"61d01335"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"claimId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"isEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"eligible\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"xpAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IXPOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"validAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Holds shared oracle state/logic. Concrete verifiers implement IXPVerifier.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"claimId(address,bytes)\":{\"details\":\"XPManager should mark this as consumed to prevent re-claims.      MUST be stable across calls and independent of current eligibility.      Recommended: keccak256(abi.encodePacked(address(this), user, contextCanonicalForm)).\",\"params\":{\"context\":\"Same bytes passed to isEligible.\",\"user\":\"The claimant.\"},\"returns\":{\"_0\":\"id A unique claim identifier.\"}},\"isEligible(address,bytes)\":{\"details\":\"MUST be a pure/read-only check (no state writes).\",\"params\":{\"context\":\"ABI-encoded parameters the verifier needs (e.g., nft addr, min balance, snapshot id).        Examples:          - abi.encode(address nftAddress, uint256 minBalance)          - abi.encode(address token, uint256 minAmount, uint256 blockNumber)\",\"user\":\"The claimant.\"},\"returns\":{\"eligible\":\"True if user currently satisfies the condition.\",\"xpAmount\":\"How much XP should be granted if eligible (0 allowed).\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"validAfter(address,bytes)\":{\"details\":\"Return 0 if the verifier has no cooldown concept. XPManager can ignore if not used.\",\"params\":{\"context\":\"Same bytes passed to isEligible.\",\"user\":\"The claimant.\"},\"returns\":{\"_0\":\"validAfter Unix timestamp after which a new claim may be attempted.\"}}},\"title\":\"XPOracleVerifier\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimId(address,bytes)\":{\"notice\":\"Deterministic ID for this specific (user, context) claim.\"},\"isEligible(address,bytes)\":{\"notice\":\"Check if `user` meets the condition described by `context`.\"},\"name()\":{\"notice\":\"Human-readable identifier for this verifier (e.g., \\\"OwnsCoolNFT:v1\\\").\"},\"validAfter(address,bytes)\":{\"notice\":\"Optional: cooldown timestamp after which the user may claim again.\"}},\"notice\":\"Abstract base for oracle-backed XP verifiers\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/verifiers/XPOracleVerifier.sol\":\"XPOracleVerifier\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/=lib/contracts/lib/chainlink/\",\":@ds-test/=lib/contracts/lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/contracts/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/contracts/lib/seaport/lib/solmate/\",\":@seaport/=lib/contracts/lib/seaport/contracts/\",\":@solady/=lib/contracts/lib/solady/\",\":@std/=lib/contracts/lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/contracts/lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/contracts/lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/contracts/lib/ERC721A/contracts/\",\":chainlink/=lib/contracts/lib/chainlink/contracts/\",\":contracts/=lib/contracts/contracts/\",\":ds-test/=lib/contracts/lib/ds-test/src/\",\":dynamic-contracts/=lib/contracts/lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/contracts/lib/ERC721A-Upgradeable/\",\":erc721a/=lib/contracts/lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":lib/sstore2/=lib/contracts/lib/dynamic-contracts/lib/sstore2/\",\":murky/=lib/contracts/lib/murky/src/\",\":openzeppelin-contracts-upgradeable/=lib/contracts/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/contracts/lib/openzeppelin-contracts-upgradeable/contracts/\",\":seaport-core/=lib/contracts/lib/seaport-core/src/\",\":seaport-sol/=lib/contracts/lib/seaport-sol/src/\",\":seaport-types/=lib/contracts/lib/seaport-types/src/\",\":seaport/=lib/contracts/lib/seaport/\",\":solady/=lib/contracts/lib/solady/src/\",\":solarray/=lib/contracts/lib/seaport/lib/solarray/src/\",\":solmate/=lib/contracts/lib/seaport/lib/solmate/src/\",\":sstore2/=lib/contracts/lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"src/interfaces/IXPOracle.sol\":{\"keccak256\":\"0x16be28fd74fcbb079d921ddce8d269ac8396c4e013d2e68b3fc279fc217ae3da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c3fe50308ab6430a1c6c7a3b3e1d13259a39280a7118f291be516c0c2024ac1\",\"dweb:/ipfs/QmdKDxCuQVhmFZmEGPWHFgcRqRQB2GX9BcLo8xhn8KYDJY\"]},\"src/interfaces/IXPVerifier.sol\":{\"keccak256\":\"0xc431e214d3e820111a2ce6153c892580f1656080f76644012eb145fdd43092c5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22fdae3a17b082774341e65fd7333f8117e06580064f19aef5fa2d2eb42ea9a1\",\"dweb:/ipfs/Qmd6rwj3xzTWgB83ydwi73PGYwZLnwvrRWdNU7UnmZGhQm\"]},\"src/verifiers/XPOracleVerifier.sol\":{\"keccak256\":\"0x8039ea7dda92b14ea5ff0b609241f5a25651dbb8e05cc56d8b9518925bc1e6e0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b827f13e9e8de6187f001570b039f1ef6c88ca3e4b2d77cc6008e84eb316a88\",\"dweb:/ipfs/QmZXvTgTuB1KwpWLFiEFg2VJ6ziczK1kzGYZtnFezW45BV\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"type":"error","name":"OwnableInvalidOwner"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"type":"error","name":"OwnableUnauthorizedAccount"},{"inputs":[{"internalType":"address","name":"oldOracle","type":"address","indexed":true},{"internalType":"address","name":"newOracle","type":"address","indexed":true}],"type":"event","name":"OracleUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"previousOwner","type":"address","indexed":true},{"internalType":"address","name":"newOwner","type":"address","indexed":true}],"type":"event","name":"OwnershipTransferred","anonymous":false},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"bytes","name":"context","type":"bytes"}],"stateMutability":"view","type":"function","name":"claimId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"bytes","name":"context","type":"bytes"}],"stateMutability":"view","type":"function","name":"isEligible","outputs":[{"internalType":"bool","name":"eligible","type":"bool"},{"internalType":"uint256","name":"xpAmount","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"name","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"oracle","outputs":[{"internalType":"contract IXPOracle","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"renounceOwnership"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"transferOwnership"},{"inputs":[{"internalType":"address","name":"newOracle","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"updateOracle"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"bytes","name":"context","type":"bytes"}],"stateMutability":"view","type":"function","name":"validAfter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"claimId(address,bytes)":{"details":"XPManager should mark this as consumed to prevent re-claims.      MUST be stable across calls and independent of current eligibility.      Recommended: keccak256(abi.encodePacked(address(this), user, contextCanonicalForm)).","params":{"context":"Same bytes passed to isEligible.","user":"The claimant."},"returns":{"_0":"id A unique claim identifier."}},"isEligible(address,bytes)":{"details":"MUST be a pure/read-only check (no state writes).","params":{"context":"ABI-encoded parameters the verifier needs (e.g., nft addr, min balance, snapshot id).        Examples:          - abi.encode(address nftAddress, uint256 minBalance)          - abi.encode(address token, uint256 minAmount, uint256 blockNumber)","user":"The claimant."},"returns":{"eligible":"True if user currently satisfies the condition.","xpAmount":"How much XP should be granted if eligible (0 allowed)."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"validAfter(address,bytes)":{"details":"Return 0 if the verifier has no cooldown concept. XPManager can ignore if not used.","params":{"context":"Same bytes passed to isEligible.","user":"The claimant."},"returns":{"_0":"validAfter Unix timestamp after which a new claim may be attempted."}}},"version":1},"userdoc":{"kind":"user","methods":{"claimId(address,bytes)":{"notice":"Deterministic ID for this specific (user, context) claim."},"isEligible(address,bytes)":{"notice":"Check if `user` meets the condition described by `context`."},"name()":{"notice":"Human-readable identifier for this verifier (e.g., \"OwnsCoolNFT:v1\")."},"validAfter(address,bytes)":{"notice":"Optional: cooldown timestamp after which the user may claim again."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/contracts/lib/chainlink/","@ds-test/=lib/contracts/lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/contracts/lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/contracts/lib/seaport/lib/solmate/","@seaport/=lib/contracts/lib/seaport/contracts/","@solady/=lib/contracts/lib/solady/","@std/=lib/contracts/lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/contracts/lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/contracts/lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/contracts/lib/ERC721A/contracts/","chainlink/=lib/contracts/lib/chainlink/contracts/","contracts/=lib/contracts/contracts/","ds-test/=lib/contracts/lib/ds-test/src/","dynamic-contracts/=lib/contracts/lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","erc721a-upgradeable/=lib/contracts/lib/ERC721A-Upgradeable/","erc721a/=lib/contracts/lib/ERC721A/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","lib/sstore2/=lib/contracts/lib/dynamic-contracts/lib/sstore2/","murky/=lib/contracts/lib/murky/src/","openzeppelin-contracts-upgradeable/=lib/contracts/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/contracts/lib/openzeppelin-contracts-upgradeable/contracts/","seaport-core/=lib/contracts/lib/seaport-core/src/","seaport-sol/=lib/contracts/lib/seaport-sol/src/","seaport-types/=lib/contracts/lib/seaport-types/src/","seaport/=lib/contracts/lib/seaport/","solady/=lib/contracts/lib/solady/src/","solarray/=lib/contracts/lib/seaport/lib/solarray/src/","solmate/=lib/contracts/lib/seaport/lib/solmate/src/","sstore2/=lib/contracts/lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/verifiers/XPOracleVerifier.sol":"XPOracleVerifier"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"keccak256":"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb","urls":["bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6","dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"keccak256":"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2","urls":["bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12","dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"],"license":"MIT"},"src/interfaces/IXPOracle.sol":{"keccak256":"0x16be28fd74fcbb079d921ddce8d269ac8396c4e013d2e68b3fc279fc217ae3da","urls":["bzz-raw://0c3fe50308ab6430a1c6c7a3b3e1d13259a39280a7118f291be516c0c2024ac1","dweb:/ipfs/QmdKDxCuQVhmFZmEGPWHFgcRqRQB2GX9BcLo8xhn8KYDJY"],"license":"MIT"},"src/interfaces/IXPVerifier.sol":{"keccak256":"0xc431e214d3e820111a2ce6153c892580f1656080f76644012eb145fdd43092c5","urls":["bzz-raw://22fdae3a17b082774341e65fd7333f8117e06580064f19aef5fa2d2eb42ea9a1","dweb:/ipfs/Qmd6rwj3xzTWgB83ydwi73PGYwZLnwvrRWdNU7UnmZGhQm"],"license":"MIT"},"src/verifiers/XPOracleVerifier.sol":{"keccak256":"0x8039ea7dda92b14ea5ff0b609241f5a25651dbb8e05cc56d8b9518925bc1e6e0","urls":["bzz-raw://9b827f13e9e8de6187f001570b039f1ef6c88ca3e4b2d77cc6008e84eb316a88","dweb:/ipfs/QmZXvTgTuB1KwpWLFiEFg2VJ6ziczK1kzGYZtnFezW45BV"],"license":"MIT"}},"version":1},"id":43}