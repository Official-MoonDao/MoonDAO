From 114c16168df5434dc61bc9d258e0ca128084d095 Mon Sep 17 00:00:00 2001
From: jaderiverstokes <jaderiverstokes@gmail.com>
Date: Fri, 16 May 2025 11:45:59 -0700
Subject: [PATCH] patch

---
 subscription-contracts/src/MoonDAOTeamCreator.sol        | 4 ++--
 subscription-contracts/src/ProjectTeamCreator.sol        | 7 +++++--
 subscription-contracts/test/EntityCreatorTest.t.sol      | 2 +-
 subscription-contracts/test/MissionTest.t.sol            | 2 +-
 subscription-contracts/test/ProjectTeamCreatorTest.t.sol | 2 +-
 subscription-contracts/test/TeamTest.t.sol               | 2 +-
 6 files changed, 11 insertions(+), 8 deletions(-)

diff --git a/subscription-contracts/src/MoonDAOTeamCreator.sol b/subscription-contracts/src/MoonDAOTeamCreator.sol
index 0bdcfe4b..3d65062b 100644
--- a/subscription-contracts/src/MoonDAOTeamCreator.sol
+++ b/subscription-contracts/src/MoonDAOTeamCreator.sol
@@ -64,7 +64,7 @@ contract MoonDAOTeamCreator is Ownable {
         openAccess = _openAccess;
     }
 
-    function createMoonDAOTeam(string memory adminHatURI, string memory managerHatURI, string memory memberHatURI, string calldata name, string calldata bio, string calldata image, string calldata twitter, string calldata communications, string calldata website, string calldata _view, string memory formId, address[] memory members) external payable returns (uint256 tokenId, uint256 childHatId) {
+    function createMoonDAOTeam(string memory adminHatURI, string memory managerHatURI, string memory memberHatURI, string calldata name, string calldata bio, string calldata image, string calldata _view, string memory formId, address[] memory members) external payable returns (uint256 tokenId, uint256 childHatId) {
 
         require(whitelist.isWhitelisted(msg.sender) || openAccess, "Only whitelisted addresses can create a MoonDAO Team");
         
@@ -104,7 +104,7 @@ contract MoonDAOTeamCreator is Ownable {
         //mint
         tokenId = moonDAOTeam.mintTo{value: msg.value}(address(gnosisSafe), msg.sender, teamAdminHat, teamManagerHat, teamMemberHat, address(memberPassthroughModule), address(split));
 
-        table.insertIntoTable(tokenId, name, bio, image, twitter, communications, website, _view, formId);
+        table.insertIntoTable(tokenId, name, bio, image, "", "", "", _view, formId);
     }
 
     function constructSafeCallData(address caller, address[] memory members) internal returns (bytes memory) {
diff --git a/subscription-contracts/src/ProjectTeamCreator.sol b/subscription-contracts/src/ProjectTeamCreator.sol
index 550802c3..ca9545b8 100644
--- a/subscription-contracts/src/ProjectTeamCreator.sol
+++ b/subscription-contracts/src/ProjectTeamCreator.sol
@@ -46,11 +46,14 @@ contract ProjectTeamCreator is Ownable {
         projectTeamAdminHatId = _projectTeamAdminHatId;
     }
 
-    function createProjectTeam(string memory adminHatURI, string memory managerHatURI, string memory memberHatURI, string calldata name, string calldata description, string calldata image, uint256 quarter, uint256 year, uint256 MDP, string calldata proposalIPFS, string calldata proposalLink, string calldata upfrontPayments, address lead, address[] memory members, address[] memory signers) external onlyOwner() returns (uint256 tokenId, uint256 childHatId) {
+    function createProjectTeam(uint256 quarter, uint256 year, uint256 MDP, string calldata proposalIPFS, string calldata proposalLink, string calldata upfrontPayments, address lead, address[] memory members, address[] memory signers) external onlyOwner() returns (uint256 tokenId, uint256 childHatId) {
         bytes memory safeCallData = constructSafeCallData(signers);
         GnosisSafeProxy gnosisSafe = gnosisSafeProxyFactory.createProxy(gnosisSingleton, safeCallData);
 
         //admin hat
+        string memory adminHatURI = "";
+        string memory managerHatURI = "";
+        string memory memberHatURI = "";
         uint256 projectAdminHat = hats.createHat(projectTeamAdminHatId, adminHatURI, 1, address(gnosisSafe), address(gnosisSafe), true, "");
         hats.mintHat(projectAdminHat, address(this));
 
@@ -78,7 +81,7 @@ contract ProjectTeamCreator is Ownable {
         //mint
         tokenId = projectTeam.mintTo(address(gnosisSafe), lead, projectAdminHat, projectManagerHat, projectContributorHat, address(memberPassthroughModule));
 
-        table.insertIntoTable(tokenId, name, description, image, quarter, year, MDP, proposalIPFS, proposalLink, "", "", "", upfrontPayments, 1, 0);
+        table.insertIntoTable(tokenId, "", "", "", quarter, year, MDP, proposalIPFS, proposalLink, "", "", "", upfrontPayments, 1, 0);
     }
 
     function constructSafeCallData(address[] memory signers) internal returns (bytes memory) {
diff --git a/subscription-contracts/test/EntityCreatorTest.t.sol b/subscription-contracts/test/EntityCreatorTest.t.sol
index 5a7bec82..5637108b 100644
--- a/subscription-contracts/test/EntityCreatorTest.t.sol
+++ b/subscription-contracts/test/EntityCreatorTest.t.sol
@@ -70,7 +70,7 @@ contract CreatorTest is Test {
 
     function testMint() public {
         vm.prank(user1);
-        creator.createMoonDAOTeam{value: 0.555 ether}(uri, uri, uri, "name", "bio", "image", "twitter", "communications", "website", "view", "formId", new address[](0));
+        creator.createMoonDAOTeam{value: 0.555 ether}(uri, uri, uri, "name", "bio", "image", "view", "formId", new address[](0));
     }
 
 
diff --git a/subscription-contracts/test/MissionTest.t.sol b/subscription-contracts/test/MissionTest.t.sol
index a760f1c3..92c740ae 100644
--- a/subscription-contracts/test/MissionTest.t.sol
+++ b/subscription-contracts/test/MissionTest.t.sol
@@ -101,7 +101,7 @@ contract MissionTest is Test, Config {
 
     function _createTeam() internal {
         vm.startPrank(user1);
-        moonDAOTeamCreator.createMoonDAOTeam{value: 0.555 ether}("", "", "","name", "bio", "image", "twitter", "communications", "website", "view", "formId", new address[](0));
+        moonDAOTeamCreator.createMoonDAOTeam{value: 0.555 ether}("", "", "","name", "bio", "image", "view", "formId", new address[](0));
         vm.stopPrank();
     }
 
diff --git a/subscription-contracts/test/ProjectTeamCreatorTest.t.sol b/subscription-contracts/test/ProjectTeamCreatorTest.t.sol
index fd7db1ed..868098d1 100644
--- a/subscription-contracts/test/ProjectTeamCreatorTest.t.sol
+++ b/subscription-contracts/test/ProjectTeamCreatorTest.t.sol
@@ -66,7 +66,7 @@ contract CreatorTest is Test {
         address[] memory members = new address[](2);
         members[0] = user2;
         members[1] = user3;
-        (uint256 tokenId, uint256 childHatId) = creator.createProjectTeam(uri, uri, uri, "title","description", "image", 4,2024, 169, "IPFS_HASH", "LINK", "UPFRONT", user1, members, members);
+        (uint256 tokenId, uint256 childHatId) = creator.createProjectTeam(4,2024, 169, "IPFS_HASH", "LINK", "UPFRONT", user1, members, members);
     }
 
     function testMint() public {
diff --git a/subscription-contracts/test/TeamTest.t.sol b/subscription-contracts/test/TeamTest.t.sol
index ce0765ab..ef232b83 100644
--- a/subscription-contracts/test/TeamTest.t.sol
+++ b/subscription-contracts/test/TeamTest.t.sol
@@ -72,7 +72,7 @@ contract ERC5643Test is Test {
 
     function _createMoonDAOTeam() internal returns (uint256 topHatId, uint256 hatId) {
       vm.startPrank(user1);
-      (uint256 topHatId, uint256 hatId) = creator.createMoonDAOTeam{value: 0.555 ether}("", "", "", "name", "bio", "image", "twitter", "communications", "website", "view", "formId", new address[](0));
+      (uint256 topHatId, uint256 hatId) = creator.createMoonDAOTeam{value: 0.555 ether}("", "", "", "name", "bio", "image", "view", "formId", new address[](0));
       vm.stopPrank();
     }
 
-- 
2.39.5 (Apple Git-154)

